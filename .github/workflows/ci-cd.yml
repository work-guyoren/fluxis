name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  # CI Jobs
  build-microservice-1:
    name: Build, Test, and Push Microservice 1
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./microservice-1/requirements.txt

      - name: Run unit tests
        run: |
          set -o pipefail
          PYTHONPATH=./microservice-1 python3 -m unittest discover -s ./microservice-1/tests -p "*.py" 2>&1 | tee test-results-microservice-1.log || true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: microservice-1-test-results
          path: test-results-microservice-1.log

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Terraform
        run: |
          sudo apt-get update && sudo apt-get install -y wget unzip
          wget https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip
          unzip terraform_1.5.0_linux_amd64.zip
          sudo mv terraform /usr/local/bin/

      - name: Verify Terraform Directory
        run: |
          if [ ! -d "./infrastructure/terraform" ]; then
            echo "Error: Directory ./infrastructure/terraform does not exist."
            exit 1
          fi

      - name: Initialize Terraform
        run: |
          terraform -chdir=./infrastructure/terraform init
          
      - name: Get Terraform Outputs
        id: tf-outputs
        run: |
          ECR_URL_MICROSERVICE_1=$(terraform -chdir=./infrastructure/terraform output -raw microservice_1_ecr_url)
          echo "ECR_URL_MICROSERVICE_1=$ECR_URL_MICROSERVICE_1" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        run: |
          docker build -t $ECR_URL_MICROSERVICE_1:latest ./microservice-1
          aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin $ECR_URL_MICROSERVICE_1
          docker push $ECR_URL_MICROSERVICE_1:latest

      - name: Upload Terraform Directory
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-directory
          path: ./infrastructure/terraform

  build-microservice-2:
    name: Build, Test, and Push Microservice 2
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./microservice-2/requirements.txt

      - name: Run unit tests
        run: |
          set -o pipefail
          PYTHONPATH=./microservice-2 python3 -m unittest discover -s ./microservice-2/tests -p "*.py" 2>&1 | tee test-results-microservice-2.log || true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: microservice-2-test-results
          path: test-results-microservice-2.log

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Terraform
        run: |
          sudo apt-get update && sudo apt-get install -y wget unzip
          wget https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip
          unzip terraform_1.5.0_linux_amd64.zip
          sudo mv terraform /usr/local/bin/

      - name: Verify Terraform Directory
        run: |
          if [ ! -d "./infrastructure/terraform" ]; then
            echo "Error: Directory ./infrastructure/terraform does not exist."
            exit 1
          fi

      - name: Initialize Terraform
        run: |
          terraform -chdir=./infrastructure/terraform init
          
      - name: Get Terraform Outputs
        id: tf-outputs
        run: |
          ECR_URL_MICROSERVICE_2=$(terraform -chdir=./infrastructure/terraform output -raw microservice_2_ecr_url)
          echo "ECR_URL_MICROSERVICE_2=$ECR_URL_MICROSERVICE_2" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        run: |
          docker build -t $ECR_URL_MICROSERVICE_2:latest ./microservice-2
          aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin $ECR_URL_MICROSERVICE_2
          docker push $ECR_URL_MICROSERVICE_2:latest

      - name: Upload Terraform Directory
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-directory
          path: ./infrastructure/terraform

  # CD Jobs
  deploy-microservice-1:
    name: Deploy Microservice 1
    runs-on: ubuntu-latest
    needs: build-microservice-1
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Print Working Directory
        run: pwd && ls -l
        
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Download Terraform Directory
        uses: actions/download-artifact@v4
        with:
          name: terraform-directory
          path: ./infrastructure/terraform

      - name: Install Terraform
        run: |
          sudo apt-get update && sudo apt-get install -y wget unzip
          wget https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip
          unzip terraform_1.5.0_linux_amd64.zip
          sudo mv terraform /usr/local/bin/

      - name: Verify Terraform Directory
        run: |
          if [ ! -d "./infrastructure/terraform" ]; then
            echo "Error: Directory ./infrastructure/terraform does not exist."
            exit 1
          fi

      - name: Initialize Terraform
        run: |
          terraform -chdir=./infrastructure/terraform init

      - name: List Terraform Outputs
        run: |
          terraform -chdir=./infrastructure/terraform output

      - name: Get Terraform Outputs
        id: tf-outputs
        run: |
          ECS_CLUSTER_ID=$(terraform -chdir=./infrastructure/terraform output -raw ecs_cluster_id)
          echo "ECS_CLUSTER_ID=$ECS_CLUSTER_ID" >> $GITHUB_ENV

      - name: Verify Task Definition
        run: |
          TASK_DEFINITION=$(aws ecs list-task-definitions --family-prefix microservice-1 --region us-east-2 --query "taskDefinitionArns[-1]" --output text)
          if [ -z "$TASK_DEFINITION" ]; then
            echo "Error: No task definition found for microservice-1."g a new one..."
            exit 1s register-task-definition --cli-input-json file://infrastructure/aws/ecs/ecs-task-definition-microservice-1.json --region us-east-2
          fiTASK_DEFINITION=$(aws ecs list-task-definitions --family-prefix microservice-1 --region us-east-2 --query "taskDefinitionArns[-1]" --output text)
          echo "TASK_DEFINITION=$TASK_DEFINITION" >> $GITHUB_ENV
          echo "TASK_DEFINITION=$TASK_DEFINITION" >> $GITHUB_ENV
      - name: Verify ECS Service
        run: |
          SERVICE_EXISTS=$(aws ecs describe-services --cluster $ECS_CLUSTER_ID --services microservice-1-service --region us-east-2 --query "services[?status=='ACTIVE'].serviceName" --output text)
          SERVICE_EXISTS=$(aws ecs describe-services --cluster $ECS_CLUSTER_ID --services microservice-1-service --region us-east-2 --query "services[?status=='ACTIVE'].serviceName" --output text)
          if [ -z "$SERVICE_EXISTS" ]; then
            echo "ECS service microservice-1-service not found. Creating service..."
            FILE_PATH="./infrastructure/aws/ecs/ecs-service-microservice-1.json"
            if [ ! -f "$FILE_PATH" ]; then
              echo "Error: Service definition file $FILE_PATH not found."
              exit 1
            fi
            envsubst < "$FILE_PATH" > service-config.json
            aws ecs create-service --cli-input-json file://service-config.json --region us-east-2
          else
            echo "ECS service microservice-1-service already exists."
          fi

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER_ID \
            --service microservice-1-service --force-new-deployment

  deploy-microservice-2:
    name: Deploy Microservice 2
    runs-on: ubuntu-latest
    needs: build-microservice-2
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Print Working Directory
        run: pwd && ls -l

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Download Terraform Directory
        uses: actions/download-artifact@v4
        with:
          name: terraform-directory
          path: ./infrastructure/terraform

      - name: Install Terraform
        run: |
          sudo apt-get update && sudo apt-get install -y wget unzip
          wget https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip
          unzip terraform_1.5.0_linux_amd64.zip
          sudo mv terraform /usr/local/bin/

      - name: Verify Terraform Directory
        run: |
          if [ ! -d "./infrastructure/terraform" ]; then
            echo "Error: Directory ./infrastructure/terraform does not exist."
            exit 1
          fi

      - name: Initialize Terraform
        run: |
          terraform -chdir=./infrastructure/terraform init

      - name: List Terraform Outputs
        run: |
          terraform -chdir=./infrastructure/terraform output

      - name: Get Terraform Outputs
        id: tf-outputs
        run: |
          ECS_CLUSTER_ID=$(terraform -chdir=./infrastructure/terraform output -raw ecs_cluster_id)
          echo "ECS_CLUSTER_ID=$ECS_CLUSTER_ID" >> $GITHUB_ENV

      - name: Verify Task Definition
        run: |
          TASK_DEFINITION=$(aws ecs list-task-definitions --family-prefix microservice-2 --region us-east-2 --query "taskDefinitionArns[-1]" --output text)
          if [ -z "$TASK_DEFINITION" ]; then
            echo "No task definition found for microservice-2. Creating a new one..."
            aws ecs register-task-definition --cli-input-json file://infrastructure/aws/ecs/ecs-task-definition-microservice-2.json --region us-east-2
            TASK_DEFINITION=$(aws ecs list-task-definitions --family-prefix microservice-2 --region us-east-2 --query "taskDefinitionArns[-1]" --output text)TASK_DEFINITION=$(aws ecs list-task-definitions --family-prefix microservice-2 --region us-east-2 --query "taskDefinitionArns[-1]" --output text)
          fi
          echo "TASK_DEFINITION=$TASK_DEFINITION" >> $GITHUB_ENV          echo "TASK_DEFINITION=$TASK_DEFINITION" >> $GITHUB_ENV

      - name: Verify ECS ServiceVerify ECS Service
        run: |
          SERVICE_EXISTS=$(aws ecs describe-services --cluster $ECS_CLUSTER_ID --services microservice-2-service --region us-east-2 --query "services[?status=='ACTIVE'].serviceName" --output text)-services --cluster $ECS_CLUSTER_ID --services microservice-2-service --region us-east-2 --query "services[?status=='ACTIVE'].serviceName" --output text)
          if [ -z "$SERVICE_EXISTS" ]; then
            echo "ECS service microservice-2-service not found. Creating service..."
            FILE_PATH="./infrastructure/aws/ecs/ecs-service-microservice-2.json"s/ecs/ecs-service-microservice-2.json"
            if [ ! -f "$FILE_PATH" ]; then
              echo "Error: Service definition file $FILE_PATH not found." Service definition file $FILE_PATH not found."
              exit 1exit 1
            fi
            envsubst < "$FILE_PATH" > service-config.json
            aws ecs create-service --cli-input-json file://service-config.json --region us-east-2s ecs create-service --cli-input-json file://service-config.json --region us-east-2
          else
            echo "ECS service microservice-2-service already exists."rvice microservice-2-service already exists."
          fi          fi

      - name: Deploy to ECSDeploy to ECS
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER_ID \
            --service microservice-2-service --force-new-deployment            --service microservice-2-service --force-new-deployment


