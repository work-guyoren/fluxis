name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  # CI Jobs
  build-microservice-1:
    name: Build, Test, and Push Microservice 1
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./microservice-1/requirements.txt
          pip install -r ./microservice-1/requirements-test.txt

      - name: Run unit tests
        run: |
          python -m unittest discover ./microservice-1/tests | tee test-results-microservice-1.log

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: microservice-1-test-results
          path: test-results-microservice-1.log

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Terraform
        run: |
          sudo apt-get update && sudo apt-get install -y wget unzip
          wget https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip
          unzip terraform_1.5.0_linux_amd64.zip
          sudo mv terraform /usr/local/bin/

      - name: Get Terraform Outputs
        id: tf-outputs
        run: |
          ECR_URL_MICROSERVICE_1=$(terraform -chdir=./infrastructure/terraform output -raw microservice_1_ecr_url)
          echo "ECR_URL_MICROSERVICE_1=$ECR_URL_MICROSERVICE_1" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        run: |
          docker build -t $ECR_URL_MICROSERVICE_1:latest ./microservice-1
          aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin $ECR_URL_MICROSERVICE_1
          docker push $ECR_URL_MICROSERVICE_1:latest

  build-microservice-2:
    name: Build, Test, and Push Microservice 2
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./microservice-2/requirements.txt
          pip install -r ./microservice-2/requirements-test.txt

      - name: Run unit tests
        run: |
          python -m unittest discover ./microservice-2/tests | tee test-results-microservice-2.log

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: microservice-2-test-results
          path: test-results-microservice-2.log

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Terraform
        run: |
          sudo apt-get update && sudo apt-get install -y wget unzip
          wget https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip
          unzip terraform_1.5.0_linux_amd64.zip
          sudo mv terraform /usr/local/bin/

      - name: Get Terraform Outputs
        id: tf-outputs
        run: |
          ECR_URL_MICROSERVICE_2=$(terraform -chdir=./infrastructure/terraform output -raw microservice_2_ecr_url)
          echo "ECR_URL_MICROSERVICE_2=$ECR_URL_MICROSERVICE_2" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        run: |
          docker build -t $ECR_URL_MICROSERVICE_2:latest ./microservice-2
          aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin $ECR_URL_MICROSERVICE_2
          docker push $ECR_URL_MICROSERVICE_2:latest

  # CD Jobs
  deploy-microservice-1:
    name: Deploy Microservice 1
    runs-on: ubuntu-latest
    needs: build-microservice-1
    steps:
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Install Terraform
        run: |
          sudo apt-get update && sudo apt-get install -y wget unzip
          wget https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip
          unzip terraform_1.5.0_linux_amd64.zip
          sudo mv terraform /usr/local/bin/

      - name: Get Terraform Outputs
        id: tf-outputs
        run: |
          ECS_CLUSTER_ID=$(terraform -chdir=./infrastructure/terraform output -raw ecs_cluster_id)
          echo "ECS_CLUSTER_ID=$ECS_CLUSTER_ID" >> $GITHUB_ENV

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER_ID \
            --service microservice-1-service --force-new-deployment

  deploy-microservice-2:
    name: Deploy Microservice 2
    runs-on: ubuntu-latest
    needs: build-microservice-2
    steps:
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Install Terraform
        run: |
          sudo apt-get update && sudo apt-get install -y wget unzip
          wget https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip
          unzip terraform_1.5.0_linux_amd64.zip
          sudo mv terraform /usr/local/bin/

      - name: Get Terraform Outputs
        id: tf-outputs
        run: |
          ECS_CLUSTER_ID=$(terraform -chdir=./infrastructure/terraform output -raw ecs_cluster_id)
          echo "ECS_CLUSTER_ID=$ECS_CLUSTER_ID" >> $GITHUB_ENV

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER_ID \
            --service microservice-2-service --force-new-deployment
