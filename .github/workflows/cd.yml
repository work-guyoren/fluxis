name: CD Pipeline

on:
  workflow_call:

jobs:
  deploy-microservice-1:
    name: Deploy Microservice 1
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Print Working Directory
        run: pwd && ls -l
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Fetch ECS Cluster ID
        id: fetch-cluster-id
        run: |
          ECS_CLUSTER_ID=$(aws ecs list-clusters --query "clusterArns[?contains(@, 'microservice-1-cluster')]" --output text)
          echo "ECS_CLUSTER_ID=$ECS_CLUSTER_ID" >> $GITHUB_ENV
      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER_ID \
            --service $ENVIRONMENT-microservice-1-service --force-new-deployment

  deploy-microservice-2:
    name: Deploy Microservice 2
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Print Working Directory
        run: pwd && ls -l
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Fetch ECS Cluster ID
        id: fetch-cluster-id
        run: |
          ECS_CLUSTER_ID=$(aws ecs list-clusters --query "clusterArns[?contains(@, 'microservice-2-cluster')]" --output text)
          echo "ECS_CLUSTER_ID=$ECS_CLUSTER_ID" >> $GITHUB_ENV
      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER_ID \
            --service $ENVIRONMENT-microservice-2-service --force-new-deployment
